@ECE 372
@Summer term
@7 / 21 / 2017
@Matt Fleetwood, Portland, OR
@Project 1
@Increments a counter whenever the pushbutton has been pressed.
@A timer interrupts the processor every 10 seconds.
@Every ten seconds, the counter value is converted to beats per minute.
@The counter then gets reset, and the speaker board states the beats per minute: "Song tempo is N beats per minute."
@If there are no beats detected, the speaker says a different message: "No beats detected."

.text
.global _start
.global INT_DIRECTOR
_start:
		          @Initialize the stacks to return from interrupts properly
		          LDR R13, =STACK1					        @Set SVC mode
		          ADD R13, R13, #0x1000					        
		          CPS #0x12							@Set IRQ mode
		          LDR R13, =STACK2
		          ADD R13, R13, #0x1000
		          CPS #0x13							@Return to SVC mode 
		          
	                  @Turn on GPIO1 clk
	                  LDR R1, =0x44E00000						@ Get the CM_PER reg
	                  MOV R2, #0x02			    				@ Wake-up enable value
	                  STR R2, [R1, #0xAC]						@ Wake-up GPIO1 (offset at 0xAC)
	                  @Turn on UART4 clock
			  STR R2, [R1, #0x78]						@Write to CM_PER_UART4_CLKCTRL	(offset at 0x78)	              
		          @Turn on Timer2 CLKCM_PER_TIMER2_CLKCTRL (offset at 0x80)
			  STR R2, [R1, #0x80]						@Turn on
                          @Address of PRCMCLKSEL_TIMER2 register (offset at 0x508)
			  STR R2, [R1, #0x508]						@Select 32 KHz CLK for Timer2
	                  
                          @Set initial GPIO values
	                  LDR R1, =0x4804C000						@ GPIO1_Base address
 	                  LDR R2, =0x01E00000						@ Initial output values
 			  STR R2, [R1, #0x190]						@ do writeout to CLEAR_DATAOUT (offset at #0x190)
 	
         	          @Set output enable
 			  LDR R2, =0xFE1FFFFF						@0's for the outputs to enable
 			  LDR R3, [R1, #0x134]						@Read OE register (offset at #0x134)
 			  AND R2, R2, R3						@Modify OE register
 			  STR R2, [R1, #0x134]				 		@Write to OE register						
			  LDR R2, =0x01E00000					        @Load value to turn off LED on GPIO1_21 - 24
			  STR R2, [R1, #0x190]			 			@Write to GPIO1_CLEARDATAOUT register (at offset #0x190)
			  
			  @Detect falling edge on GPIO1_31 and enable to assert POINTRPEND1
			  MOV R2, #0x80000000						@Load value for bit 31
			  LDR R3, [R1, #0x14C]						@Read GPIO1_FALLINGDETECT register (at offset 0x14C)
			  ORR R3, R3, R2						@Modify (set bit 31)
			  STR R3, [R1, #0x14C]						@Write back
			  STR R2, [R1, #0x34]						@Enable GPIO1_31 request on POINTRPEND1 (at offset 0x34)
			  
                          @Initialize code for INTC (pushbutton, Timer2, and UART4)
			  LDR R1, =0x48200000						@Base address for INTC
			  MOV R2, #0x02							@Value to reset INTC
			  STR R2, [R1, #0x10]						@Write to INTC Config register (at offsect 0x10)
			  MOV R2, #0x10							@Unmask INTC INT 68, Timer2 interrupt 
			  STR R2, [R1, #0xC8]						@Write to INTC_MIR_CLEAR2 register (at offsect 0xC8)
			  MOV R2, #0x04							@Value to unmask INTC INT 98, GPIOINTA  
			  STR R2, [R1, #0xE8]						@Write to INTC_MIR_CLEAR3 register (at offsect 0xE8)
                          MOV R2, #0x2000						@Mask INTC_INT45, UART4 interrupt
                          STR R2, [R1, #0xAC]					        @Mask UART4 interrupt, INTC_INT_45 (at offsect 0xAC)
			  MOV R2, #0x20000000						@Unmask INTC INT 45, UART4 interrupt
			  STR R2, [R1, #0xC8]						@Write to INTC_MIR_CLEAR2 register (at offsect 0xC8)

			  @Map the UART4 TxD, RxD, CTS, and RTS to pins on the BBB P8 connector by changing
			  @the mode of the multiplexers that select the signals to the pads (pg. 213 - 214 of Microprocessors by Hall)
			  LDR R1, =0x44E10000						@Base address for the Control Module
			  MOV R2, #0x06							@Control words for switching to new mode (mode 6)
			  MOV R3, #0xFFFFFFFE
			  @Switch UART4_RxD to Mode 4 (conf_gpmc_wait0)                                            					
			  LDR R4, [R1, #0x870]						@Read from RxD     
			  AND R4, R4, R3						@Modify
			  ORR R4, R4, R2
			  STR R4, [R1, #0x870]						@Write back
                          @Switch UART4_RTSN to Mode 6 (conf_lcd_data13)
			  LDR R4, [R1, #0x8D4]						@Read from RTSN
			  AND R4, R4, R3						@Modify
			  ORR R4, R4, R2
			  STR R4, [R1, #0x8D4]						@Write back			      		
			  @Switch UART4_CTSN to Mode 6 (conf_lcd_data12)
			  LDR R4, [R1, #0x8D0]						@Read from CTSN
			  AND R4, R4, R3						@Modify
			  ORR R4, R4, R2
			  STR R4, [R1, #0x8D0]						@Write back			      				
			  @Switch UART4_TxD to Mode 4 (conf_gpmc_wpn)
			  LDR R4, [R1, #0x874]						@Read from TxD
			  AND R4, R4, R3						@Modify
			  ORR R4, R4, R2
			  STR R4, [R1, #0x874]						@Write back			       		  

                          @Access the Divisor Latch Low and D.L. High registers to set the desired Baud rate
                          MOV R0, #0x88						        @Enable the DLL for a Baud rate
			  LDR R1, =0x481A8000						@Base address for UART4 + 0x0 for DLL	              
			  MOV R2, #0xFFFFFF00						@Mask for first 8 bits					
			  LDR R3, [R1] 				        		@Read from DLL
			  AND R3, R3, R2						@Set the bits to 0
                          ORR R3, R3, R0						@Set the bits to 1
	                  STR R3, [R1]							@Write back to DLL
			  LDR R4, [R1, #0x4]						@Base address for UART4 + 4h for DLH
                          MOV R0, #0x13		              				
			  AND R4, R4, R2						@Set the bits to 0
                          ORR R4, R4, R0						@Set the bits to 1
	                  STR R4, [R1, #0x4]						@Write back to DLH
                          MOV R0, #0x6							@Disable FIFO and clear bit using these values
		          MOV R2, #0xFFFFFFFE
			  LDR R4, [R1, #0x8]						@Base address for UART4 + 8h for FCR
			  AND R4, R4, R2						@Set the bits to 0
                          ORR R4, R4, R0						@Set the bits to 1
	                  STR R4, [R1, #0x8]						@Write back to DLL
                          MOV R0, #0x83							@Set bits 0, 1, and 7
			  MOV R2, #0xFFFFFFF3						@Clear bits 2 and 3 (to 0)	  
 			  LDR R4, [R1, #0xC]				        	@Base address for UART4 + Ch for LCR
			  ORR R4, R4, R0						@Set the bits to 0
			  AND R4, R4, R2						@Set the bits to 0
	                  STR R4, [R1, #0xC]						@Write back to DLL
                          MOV R0, #0xA							@Set bits 3 and 1
                          LDR R3, [R1]
			  ORR R3, R3, R0
                          STR R3, [R1]							@Set interrupts for MODEMSTS and THR IRQ
                          MOV R2, #0xFFFFFFF8						@Clear bits [2:0]
 			  LDR R4, [R1,#0x20]				        	@Base address for UART4 + 20h for MDR1
			  AND R4, R4, R2						@Set the bits to 0
	                  STR R4, [R1, #0x20]						@Write back to DLL
 			  MOV R2, #0xFFFFFF7F 
			  LDR R4, [R1, #0xC]				        	@Base address for UART4 + Ch for LCR
			  AND R4, R4, R2						@Set the bits to 0
	                  STR R4, [R1, #0xC]						@Write back to DLL			  
			  LDR R4, [R1, #0x4]						@Base address for UART4 + 4h for DLH
                          MOV R0, #0xA		              				
                          ORR R4, R4, R0						@Set the bits to 1
	                  STR R4, [R1, #0x4]						@Write back to DLH                            			      
			  
                          @Initialize Timer 2 registers, with count, overflow interrupt generation
			  LDR R1, =0x48040000						@Base address for Timer2 registers
			  MOV R2, #0x1		       					@Value to reset Timer2
			  STR R2, [R1, #0x10]						@Write to Timer2 CFG register
			  MOV R2, #0x2							@Value to enable Overflow interrupt
			  STR R2, [R1, #0x2C]						@Write to Timer2 IRQENABLE_SET
			  LDR R2, =0xFFFB0000						@Count value for 10 seconds
			  STR R2, [R1, #0x40]						@Timer2 TLDR load register (Reload value)
			  STR R2, [R1, #0x3C]						@Write to Timer2 TCRR count register
			  
			  @Start Timer2
			  MOV R2, #0x03							@Load val to auto reload timer and start
			  LDR R11, =0x48040038						@Address of Timer2 TCLR register
			  STR R2, [R11]							@Write to TCLR register		  	
			  
			  @Enable IRQ in CPSR
			  MRS R3, CPSR							@Copy CPSR to R3
			  BIC R3, #0x80							@Clear bit 7
			  MSR CPSR_c, R3						@Write back to CPSR  
			  MOV R0, #0							@Init the LED counter to 1		  	

MAIN:		  	  @Mainline for the program, loops until an interrupt occurs
		     	  LDR R11, =BTTN_PRS						@Set ptr to the button flag
		     	  LDR R2, [R11]							@Get the button flag
		      	  CMP R2, #0							@Is the flag 0?
		          BNE INC_CNTR		      					@No, increment the button counter
		          LDR R11, =TIMER						@Get the timer flag
		          LDR R2, [R11]							@Get state of timer flag
		          CMP R2, #0							@Check if timer flag is 0
		          BNE RESET							@No, so reset the button counter and timer flag
		          B   MAIN			  	 			@Loop to main	      

INC_CNTR:	 	  @Increments the button counter, and clear the button flag
                          MOV R2, #0				                        @Reset to 0
		     	  LDR R11, =BTTN_PRS						@Set ptr to the button flag
		     	  STR R2, [R11]							@Clear the flag
             	 	  LDR R10, =BTTN_CNTR	       					@Get button counter,
              	          LDR R2, [R10]
              	          ADD R2, R2, #1						@increment by 1,
              	          STR R2, [R10]							@and write back
	         	  MOV R3, #6							@Put 6 on R3 to use MUL instruction (i.e. to get to beats per min)
	         	  MUL R1, R2, R3			
	         	  LDR R2, =BEAT_DTCT						@Set the beats per minute
	         	  BL  bin_to_ascii						@Convert from binary to ascii
			  B   MAIN							@Go back to MAIN loop
			  
			  
RESET:	   		  @Resets the button counter and the Timer2 flag, then auto reloads timer and starts it
			  MOV R2, #0x0
	                  LDR R11, =BTTN_CNTR						@Reset the button counter to 0
			  STR R2, [R11]
			  LDR R11, =TIMER			
	                  MOV R2, #0							@Value to clear flag
	                  STR R2, [R11]							@Write back to the flag	
	              
	             	  @Initialize Timer 2 registers, with count, overflow interrupt generation
			  LDR R1, =0x48040000						@Base address for Timer2 registers
			  MOV R2, #0x1		       					@Value to reset Timer2
			  STR R2, [R1, #0x10]						@Write to Timer2 CFG register
			  MOV R2, #0x2							@Value to enable Overflow interrupt
			  STR R2, [R1, #0x2C]						@Write to Timer2 IRQENABLE_SET
			  LDR R2, =0xFFFB0000						@Count value for 10 seconds
			  STR R2, [R1, #0x40]						@Timer2 TLDR load register (Reload value)
			  STR R2, [R1, #0x3C]						@Write to Timer2 TCRR count register
	              	  	  
	                  @Start Timer2
			  MOV R2, #0x03							@Load val to auto reload timer and start
			  STR R2, [R1, #38]						@Write to TCLR register 
			  B   MAIN							@Go back to MAIN loop
		  
bin_to_ascii:	          @accepts integer value to be converted to the equivalent ascii representation
			  @R1: value to convert [0, 999]
			  @R2: pointer to destination array (where converted value gets stored)
			  @uses	R4 - R10
			
		          STMFD	SP!, {R4 - R10, LR}					@save all used registers
			  CMP R1, #0							@is the value to be converted outside of the expected range (i.e. 0 - 999)?
			  BLT error							@less than 0, so return with -1 on R0
			  CMP R1, #1000
			  BGT error							@greater than 999, so ret with -1 on R0
			
			  @if here then value is inside the expected range
			  @set counters (hundreds, tens, ones)
			  MOV R7, R1							@Copy R1 to R7
			  MOV R4, #0							@hundreds counter
			  MOV R5, #0							@tens counter
			  MOV R6, #0							@ones counter
			  CMP R1, #100					       	 	@is the input value greater than 100?
			  BLT tens							@go to tens label if val is less than 100
			
hundreds:		  @if here then the input value > 100
			  SUB R7, R7, #100						@get new value from the input val
			  ADD R4, R4, #1						@increment hundreds counter
			  CMP R7, #100							@is the new val > 100?
			  BGT hundreds							@yes, so repeat
			
tens:			  @if here then the new value < 100
			  CMP R7, #10							@is the current val > 10?
			  BLT ones							@no, so set ones counter at the ones label
			  SUB R7, R7, #10						@yes, so keep subtracting
			  ADD R5, R5, #1						@update the tens counter
			  B   tens					    		@return to tens label, check if the new val is > 10
			
ones:			  @if here then the new value < 10
			  MOV R6, R7							@set the ones counter
			
			  @set R0 to 0 to indicate function success; init R8 (ascii representation) to 0
			  MOV R0, #0
			  @add 0x30 to the counters
			  ADD R4, R4, #0x30
			  ADD R5, R5, #0x30	
			  ADD R6, R6, #0x30
			 
			  @set the value in the destination array and return
			  STRB R6, [R2, #14]						@store hundreds counter
			  STRB R5, [R2, #15]						@store tens counter
			  STRB R4, [R2, #16]						@store ones counter
			  LDMFD	SP!, {R4 - R10, PC}
			
error:			  @if here then input value was outside of the expected range [0 - 999]
			  @set R0 to -1 to indicate function failure and return
			  MOV R0, #-1
			  LDMFD	SP!, {R4 - R10, PC}
					  
INT_DIRECTOR:             @Control structure for responding to interrupts (pushbutton and timer used here)
			  STMFD SP!, {R0-R6, LR}					@Push registers on stack
			  LDR R0, =0x482000B8						@Address of INTC-PENDING_IRQ2 register
			  LDR R1, [R0]							@Read INTC-PENDING-IRQ2 register
			  
			  @Check for UART4 interrupt
			  TST R1, #0x2000						@TEST bit 13
			  BNE CHECK_UART4						@If not equal, go check if the UART sent an interrupt
			  LDR R0, =0x482000F8						@Get address of INTC_PENDING_IRQ3 to check Timer2
			  TST R1, #0x4							@TEST bit 2
			  BEQ TCHK							@Not GPIOINT1A, check if Timer2, else
			  LDR R0, =0x4804C02C						@GPIO1_IRQstatus_0
			  LDR R1, [R0]							@Read STATUS register
			  TST R1, #0x80000000						@Check if bit 31 = 1
			  BNE BUTTON_SVC						@If bit 31 = 1, then button pushed
			  
RET_MAIN:        	  @Label handles code returning from the interrupt routine(s) to the mainline
			  LDR R0, =0x48200048						@Address of INTC_CONTROL register
			  MOV R1, #01					    		@Value to clear bit 0
			  STR R1, [R0]				    			@Write to INTC_CONTROL register
			  LDMFD SP!, {R0-R6, LR}					@Restore registers
			  SUBS PC, LR, #4			    			@Go back to MAIN loop

CHECK_UART4:              @Check which interrupt UART4 created by reading from the IIR_UART register
	                  LDR R0, =0x481A8008 			  			@Address of IIR_UART register
                          LDR R1, [R0]							@Read
                          TST R1, #0x00							@If equal to 0, then the UART4 generated the interrupt
                          BEQ TLKR                                                      @Service the interrupt in TLKR label, else
                          B RET_MAIN							@Go back to MAIN loop

TCHK:	         	  @Checks if the interrupts was from the timer, if true also checks for overflow (toggling if there is overflow)
			  LDR R1, =0x482000D8						@Address of INTC PENDING_IRQ2 register
			  LDR R0, [R1]				    			@Read value
			  TST R0, #0x10				    			@Check if interrupt from Timer2
			  BEQ RET_MAIN				    			@Not from Timer2 so return to MAIN loop
			  LDR R1, =0x48040028						@Address of Timer2 IRQSTATUS register
			  LDR R0, [R1]		    					@Read value
			  TST R0, #0x2			    				@Check bit 1
			  BNE TOGGLE					    		@If Overflow, then toggle UART for interrupts
			  B RET_MAIN			    				@If here, no overflow so return to MAIN loop

TOGGLE:		     	  @Turn off Timer2 interrupt request and enable INTC for next IRQ
			  LDR R1, =0x48040028						@Address of INTC PENDING_IRQ2 register
			  MOV R2, #0x2				    			@Value to turn off
			  STR R2, [R1]				    			@Write back 
			  @Toggle timer flag
			  LDR R6, =TIMER						@Load ptr to the timer flag
			  MOV R4, #0x1							@Set the timer flag
			  STR R4, [R6]
			  LDR R1, =0x481A8004				    		@Base address for UART4 + 0x04 for IER_UART
			  MOV R0, #0x0A					    		@Enable UART interrupt
			  STRB R0, [R1]					    		@Write back to MCR			  	
			  B RET_MAIN				    			@Return to MAIN loop

TLKR:		    	  @Need to check CTS# low and THR empty before sending any chars
			  LDR R1, =0x481A8018						@Base address for UART4 + 18h for Modem Status Register (MSR)
			  LDRB R0, [R1]							@Get contents of MSR
			  TST R0, #0x10							@Is bit 4 of the MSR 1? (= CTS# asserted low)
			  BEQ NOCTS							@No, go check THR
			  LDR R1, =0x481A8014						@Base address for UART4 + 14h Line Status Register (LSR_UART)
			  LDR R0, [R1]							@Get contents of LSR_UART
			  TST R0, #0x20							@Check if bit 5 of the LSR_UART is 1
			  BEQ RET_MAIN							@If not, return to MAIN loop for THR-READY
			  B SEND							@Otherwise yes, both asserted, send character
			     
NOCTS:
			  LDR R1, =0x481A8014						@Base address for UART4 + 14h Line Status Register (LSR_UART)
			  LDRB R0, [R1]							@Get contents of LSR_UART
			  TST R0, #0x20							@Check if bit 5 of the LSR_UART is 1
			  BEQ RET_MAIN							@If not, return to MAIN loop for THR-READY
			  
			  @Else, no CTS# but THR asserted, disable interrupt on THR to prevent spinning while
			  @waiting for CTS#
			  LDR R1, =0x481A8018						@Base address for UART4 + 4h Interrupt Enable Register (IER_UART)
			  MOV R0, #0x08							@Set bit 1 (THRIT) of IER_UART to 0 to disable the THR interrupt
			  STR R0, [R1]							@Write to IER_UART
         		  B RET_MAIN							@Go back to MAIN loop

SEND:		          @Unmask THR, send char, if end of message reset char count and disable UART interrupt					 			  
		          LDR R4, =0x481A8018						@Base address for UART4 + 18h Modem Status Register (MSR_UART)
		          MOV R5, #0x0A							@Bit 3 = MSR, bit 1 = Tx interrupt enable
                          LDR R3, [R4]							@Read from the register
                          ORR R3, R3, R5						@Modify
		          STR R3, [R4]							@Write back
                          LDR R0, =BTTN_CNTR			    			@Check whether the button was pressed, i.e. determine which message to send
                          LDR R1, [R0]							@Check if button counter is 0
		          @CMP R1, #0					
		          @BEQ NO_DTCT							@Send the second phrase if there was no beats detected
		          LDR R0, =BEAT_PTR						@Send character, R0 = address of pointer store
		          LDR R1, [R0]							@R1 = address of desired char in text string
		          LDR R2, =BEAT_COUNT						@R2 = address of count store location
		          LDR R3, [R2]							@Get current character count value
		          LDRB R4, [R1], #1						@Read character to send from string, inc ptr in R1
		          STR R1, [R0]							@Put incremented address back in CHAR_PTR location
		          LDR R5, =0x481A8000						@Base address for UART4 + 0h Transmit Holding Register (THR)
		          STRB R4, [R5]							@Write character to THR		
		          SUBS R3, R3, #1						@Decrement character counter by 1
		          STR R3, [R2]							@Store character value back in memory
		          BPL RET_MAIN							@Greater than or equal to zero, more characters
		          LDR R3, =BEAT_DTCT						@Done, reload; get address of start of string
		          STR R3, [R0]							@Write in char ptr store location in memory
		          MOV R3, #39          						@Load original number of character in string again
		          STR R3, [R2]							@Write back to memory for next message send
		          LDR R0, =0x481A8010						@Base address for UART4 + 10h Modem Control Register (MCR)
                          LDRB R1, [R0]							@Read current value of MCR
                          BIC R1, R1, #0x08						@Clear bit 3 to disable UART interrupts
                          STRB R1, [R0]							@Write byte back to MCR
                          B RET_MAIN							@Go back to MAIN loop

@placeholder

BUTTON_SVC:               @Handles interrupt requests from the button
			  LDR R0, =0x4804C02C						@GPIO1_IRQstatus_0
			  LDR R1, =0x80000000						@Value turns off GPIO1_31 Interrupt request
			  STR R1, [R0]							@Write to GPIO1_IRQSTATUS_0 register
			  
			  @Toggle memory flag
			  LDR R0, =BTTN_PRS						@Load ptr to memory flag
			  MOV R1, #1							@Set button flag to 1
			  STR R1, [R0]							@Store the new memory flag state
			  B RET_MAIN							@Go back to the mainline  
			  
.data
.align 4

BEAT_DTCT:    .byte 0x1										@This is the "command bit" the RS8660 uses to specify a command; here it is used for the voice
              .ascii "1o"
              .ascii "Song tempo is"
              .byte 0x0D
              .byte 0x00
              .byte 0x00
              .byte 0x00
              .byte 0x0D
              .ascii "beats per minute"
              .byte 0x0D
              .align 4
              
BEAT_PTR:	  .word BEAT_DTCT
BEAT_COUNT:   .word 38
.word 0x0, 0x0, 0x0, 0x0
.byte 0x00, 0x00
NO_BEAT:      .byte 0x1
              .ascii "3o"
              .ascii "No beats detected"
              .word 0x0D
CHAR_PTR:	  .word NO_BEAT
CHAR_COUNT:   .word 21

BTTN_PRS:	  .word 0x0									@Memory flag is 0 if lights are off, 1 if lights are on
		  
LED_state:	  .word 0x0									@Memory flag is 0 if the timer was cleared in MAIN, 1 if it was set in the Timer2 routine

TIMER:		  .word 0x0									@Memory flag for the timer   								

BTTN_CNTR:	  .word 0x0									@How many times the pushbutton has been pressed

.align 4

 STACK1:	.rept 1024
 			.word 0x0000
 			.endr
 STACK2:	.rept 1024
 			.word 0x0000
 			.endr
.end

